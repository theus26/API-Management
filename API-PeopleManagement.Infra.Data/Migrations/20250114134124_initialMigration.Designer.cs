// <auto-generated />
using System;
using API_PeopleManagement.Infra.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace API_PeopleManagement.Infra.Data.Migrations
{
    [DbContext(typeof(PeopleManagementContext))]
    [Migration("20250114134124_initialMigration")]
    partial class initialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("API_PeopleManagement.Domain.Entities.ChangeRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ChangedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ChR_ChangedBy");

                    b.Property<string>("ChangedField")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ChR_ChangedField");

                    b.Property<DateTime>("DateAndTimeOfChange")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ChR_DateAndTimeOfChange");

                    b.Property<Guid>("EmployeesId")
                        .HasColumnType("uuid");

                    b.Property<string>("NewValue")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ChR_NewValue");

                    b.Property<string>("OldValue")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ChR_OldValue");

                    b.HasKey("Id");

                    b.HasIndex("EmployeesId");

                    b.ToTable("ChR_ChangeRecord", "PeopleManagement");
                });

            modelBuilder.Entity("API_PeopleManagement.Domain.Entities.Employees", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AdmissionDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Emp_AdmissionDate");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("Emp_EmployeesStatus");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Emp_Name");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Emp_Position");

                    b.Property<double>("Wage")
                        .HasColumnType("double precision")
                        .HasColumnName("Emp_Wage");

                    b.HasKey("Id");

                    b.ToTable("Emp_Employees", "PeopleManagement");
                });

            modelBuilder.Entity("API_PeopleManagement.Domain.Entities.VacationRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EmployeesId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("VacationStartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("VaR_VacationStartDate");

                    b.Property<int>("VacationStatus")
                        .HasColumnType("integer")
                        .HasColumnName("VaR_VacationStatus");

                    b.Property<DateTime>("VacationeEndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("VaR_VacationeEndDate");

                    b.HasKey("Id");

                    b.HasIndex("EmployeesId");

                    b.ToTable("VaR_VacationRecord", "PeopleManagement");
                });

            modelBuilder.Entity("API_PeopleManagement.Domain.Entities.ChangeRecord", b =>
                {
                    b.HasOne("API_PeopleManagement.Domain.Entities.Employees", "Employees")
                        .WithMany("ChangeRecords")
                        .HasForeignKey("EmployeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("API_PeopleManagement.Domain.Entities.VacationRecord", b =>
                {
                    b.HasOne("API_PeopleManagement.Domain.Entities.Employees", "Employees")
                        .WithMany("VacationRecords")
                        .HasForeignKey("EmployeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("API_PeopleManagement.Domain.Entities.Employees", b =>
                {
                    b.Navigation("ChangeRecords");

                    b.Navigation("VacationRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
